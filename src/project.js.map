{"version":3,"sources":["assets/Scripts/JoystickDefines.js","assets/Scripts/bomb.js","assets/Scripts/enemy.js","assets/Scripts/fireHorAnim.js","assets/Scripts/fireVerAnim.js","assets/Scripts/game.js","assets/Scripts/joyStick.js"],"names":["module","exports","DirectionType","cc","Enum","FOUR","EIGHT","ALL","Class","extends","Component","properties","onLoad","director","getCollisionManager","enabled","start","explode","event","Event","EventCustom","setUserData","this","node","position","dispatchEvent","onAnimCompleted","destroy","DIR","UP","RIGHT","DOWN","LEFT","enemyMaxSpeed","game","default","serializable","direction","type","xSpeed","ySpeed","update","dt","_gameLost","currentPosition","getPosition","self","loader","loadRes","SpriteFrame","err","spriteFrame","console","log","getComponent","Sprite","nextTilePos","getTilePos","p","x","y","tryMoveToTarTile","getTilePixelPos","setPosition","newTilePos","width","_self","_nextTilePos","_position","newNextTile","_self2","_nextTilePos2","tileSize","height","_position2","_self3","_nextTilePos3","_position3","newTile","mainLayer","getTileGIDAt","bombTiles","length","index","equals","pointEqualToPoint","playerTile","onCollisionEnter","other","_enemyCount","fireAnimationEnd","maxMoveSpeed","maxBombCount","bombCount","fireLength","mapSize","size","lblResult","Label","Vec2","bombPrefab","Prefab","player","Node","monster","fireHor","fireVer","map","TiledMap","TiledLayer","hideLayer","getContentSize","getTileSize","accLeft","accRight","accUp","accDown","loadMap","on","bombExploded","getObjectGroup","getObjects","forEach","value","getProperty","playerOriginPos","enemyPos","newEnemy","instantiate","setAnchorPoint","addChild","willSetABombAction","setABomb","bomb","tilePosition","push","stopPropagation","bombPosition","detail","bombTile","createBombFire","splice","getTileType","fireTile","fireAnim","fireTile2","fireAnim2","removeTileAt","_fireTile","_fireAnim","_fireTile2","_fireAnim2","_fireTile3","_fireAnim3","_fireTile4","_fireAnim4","_fireTile5","_fireAnim5","_fireTile6","_fireAnim6","opacity","string","currentPlayerPosition","_tilePos","currentPlayerTile","tilePos","newPosition","_tilePos3","_currentPlayerTile","_tilePos2","_newPosition","_tilePos5","_currentPlayerTile2","_position5","_tilePos4","_newPosition2","_position4","_tilePos7","_currentPlayerTile3","_position7","_tilePos6","_newPosition3","_position6","updatePlayerTilePos","layer","tile","prop","getPropertiesForGID","posInPixel","Math","floor","tmpPlayerTile","Common","require","_bomberGame","displayName","stickDot","_angle","_radian","stickType","parent","initJoyStickTouchEvent","EventType","TOUCH_START","_touchStartEvent","TOUCH_MOVE","_touchMoveEvent","TOUCH_END","_touchEndEvent","TOUCH_CANCEL","_getDistance","pos1","pos2","sqrt","pow","_getRadian","point","PI","_getAngle","pos","atan2","_setSpeed","_radius","_speed","_speed1","_speed2","touchPos","convertToNodeSpaceAR","getLocation","distance","radius","_stickPos","posX","posY","cos","sin","_fourDirectionsMove"],"mappings":"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","sourcesContent":["module.exports = {\n    DirectionType: cc.Enum({\n        FOUR: 4,\n        EIGHT: 8,\n        ALL: 0,\n    }),\n};","// Learn cc.Class:\n//  - [Chinese] http://www.cocos.com/docs/creator/scripting/class.html\n//  - [English] http://www.cocos2d-x.org/docs/editors_and_tools/creator-chapters/scripting/class/index.html\n// Learn Attribute:\n//  - [Chinese] http://www.cocos.com/docs/creator/scripting/reference/attributes.html\n//  - [English] http://www.cocos2d-x.org/docs/editors_and_tools/creator-chapters/scripting/reference/attributes/index.html\n// Learn life-cycle callbacks:\n//  - [Chinese] http://www.cocos.com/docs/creator/scripting/life-cycle-callbacks.html\n//  - [English] http://www.cocos2d-x.org/docs/editors_and_tools/creator-chapters/scripting/life-cycle-callbacks/index.html\n\ncc.Class({\n    extends: cc.Component,\n\n    properties: {\n        // foo: {\n        //     // ATTRIBUTES:\n        //     default: null,        // The default value will be used only when the component attaching\n        //                           // to a node for the first time\n        //     type: cc.SpriteFrame, // optional, default is typeof default\n        //     serializable: true,   // optional, default is true\n        // },\n        // bar: {\n        //     get () {\n        //         return this._bar;\n        //     },\n        //     set (value) {\n        //         this._bar = value;\n        //     }\n        // },\n    },\n\n    // LIFE-CYCLE CALLBACKS:\n\n    onLoad () {\n        var manager = cc.director.getCollisionManager();\n        manager.enabled = true\n    },\n\n    start () {\n\n    },\n\n    explode: function() {\n        let event = new cc.Event.EventCustom('bombExplode', true)\n        event.setUserData(this.node.position)\n        this.node.dispatchEvent(event)\n    },\n\n    onAnimCompleted: function () {\n        this.node.destroy()\n    },\n\n    // update (dt) {},\n});\n","// Learn cc.Class:\n//  - [Chinese] http://www.cocos.com/docs/creator/scripting/class.html\n//  - [English] http://www.cocos2d-x.org/docs/editors_and_tools/creator-chapters/scripting/class/index.html\n// Learn Attribute:\n//  - [Chinese] http://www.cocos.com/docs/creator/scripting/reference/attributes.html\n//  - [English] http://www.cocos2d-x.org/docs/editors_and_tools/creator-chapters/scripting/reference/attributes/index.html\n// Learn life-cycle callbacks:\n//  - [Chinese] http://www.cocos.com/docs/creator/scripting/life-cycle-callbacks.html\n//  - [English] http://www.cocos2d-x.org/docs/editors_and_tools/creator-chapters/scripting/life-cycle-callbacks/index.html\n\nvar DIR = cc.Enum({\n    UP : -1,\n    RIGHT : 2,\n    DOWN : 1,\n    LEFT : -2\n});\n\ncc.Class({\n    extends: cc.Component,\n\n    properties: {\n        // foo: {\n        //     // ATTRIBUTES:\n        //     default: null,        // The default value will be used only when the component attaching\n        //                           // to a node for the first time\n        //     type: cc.SpriteFrame, // optional, default is typeof default\n        //     serializable: true,   // optional, default is true\n        // },\n        // bar: {\n        //     get () {\n        //         return this._bar;\n        //     },\n        //     set (value) {\n        //         this._bar = value;\n        //     }\n        // },\n\n        enemyMaxSpeed: 0,\n\n        game: {\n            default: null,\n            serializable: false\n        },\n\n        direction: {\n            default: DIR.UP,\n            type: DIR\n        }\n    },\n\n    // LIFE-CYCLE CALLBACKS:\n\n    onLoad () {\n        this.xSpeed = 0\n        this.ySpeed = 0\n\n        this.enemyMaxSpeed = 5\n    },\n\n    start () {\n\n    },\n\n    update (dt) {\n\n        if (this.game._gameLost) {\n            return\n        }\n\n        let currentPosition = this.node.getPosition();\n\n        if (this.direction === DIR.LEFT) {\n            let self = this;\n            cc.loader.loadRes(\"monster/monsterLeft\", cc.SpriteFrame, function(err, spriteFrame) {\n                if (err) {\n                    console.log(err)\n                } else {\n                    self.node.getComponent(cc.Sprite).spriteFrame = spriteFrame\n                }\n            });\n\n            let nextTilePos = this.game.getTilePos(cc.p(currentPosition.x - this.enemyMaxSpeed, currentPosition.y));\n            if (!this.tryMoveToTarTile(nextTilePos)) {\n                let position = this.game.getTilePixelPos(cc.p(nextTilePos.x + 1, nextTilePos.y));\n                this.node.setPosition(cc.p(position.x + 1, currentPosition.y))\n                this.xSpeed = 0\n\n                //尝试反向\n                let newTilePos = this.game.getTilePos(cc.p(currentPosition.x + this.node.width + this.enemyMaxSpeed, currentPosition.y))\n                if (this.tryMoveToTarTile(newTilePos)) {\n                    this.direction = DIR.RIGHT\n                } else {\n                    this.direction = DIR.UP\n                }\n            } else {  //可以通过\n                this.xSpeed = -this.enemyMaxSpeed\n            }\n        }\n\n        if (this.direction === DIR.RIGHT) {\n            let self = this;\n            cc.loader.loadRes(\"monster/monsterRight\", cc.SpriteFrame, function(err, spriteFrame) {\n                if (err) {\n                    console.log(err)\n                } else {\n                    self.node.getComponent(cc.Sprite).spriteFrame = spriteFrame\n                }\n            });\n\n            let nextTilePos = this.game.getTilePos(cc.p(currentPosition.x + this.node.width + this.enemyMaxSpeed, currentPosition.y));\n            if (!this.tryMoveToTarTile(nextTilePos)) {\n                let position = this.game.getTilePixelPos(cc.p(nextTilePos.x - 1, nextTilePos.y));\n                this.node.setPosition(cc.p(position.x + 1, currentPosition.y))\n                this.xSpeed = 0\n\n                //尝试反向\n                let newNextTile = this.game.getTilePos(cc.p(currentPosition.x - this.enemyMaxSpeed, currentPosition.y))\n                if (this.tryMoveToTarTile(newNextTile)) {\n                    this.direction = DIR.LEFT\n                } else {\n                    //反向也无法通过, 尝试向下\n                    this.direction = DIR.DOWN\n                }\n            } else {\n                this.xSpeed = this.enemyMaxSpeed\n            }\n        }\n\n        if (this.direction !== DIR.LEFT && this.direction !== DIR.RIGHT) {\n            this.xSpeed = 0\n        }\n\n        this.node.x += this.xSpeed\n\n        if (this.direction === DIR.UP) {\n            let self = this;\n            cc.loader.loadRes(\"monster/monsterBack\", cc.SpriteFrame, function(err, spriteFrame) {\n                if (err) {\n                    console.log(err)\n                } else {\n                    self.node.getComponent(cc.Sprite).spriteFrame = spriteFrame\n                }\n            });\n\n            let nextTilePos = this.game.getTilePos(cc.p(currentPosition.x, currentPosition.y + this.game.tileSize.height + this.enemyMaxSpeed));\n            if (!this.tryMoveToTarTile(nextTilePos)) {\n                let position = this.game.getTilePixelPos(cc.p(nextTilePos.x, nextTilePos.y + 1));\n                this.node.setPosition(currentPosition.x, position.y + 1);\n                this.node.ySpeed = 0;\n\n                if (this.tryMoveToTarTile(this.game.getTilePos(cc.p(currentPosition.x, currentPosition.y - this.enemyMaxSpeed)))) {\n                    this.direction = DIR.DOWN\n                } else {\n                    this.direction = DIR.LEFT\n                }\n            } else {\n                this.ySpeed = this.enemyMaxSpeed\n            }\n        }\n\n        if (this.direction === DIR.DOWN) {\n            let self = this;\n            cc.loader.loadRes(\"monster/monsterFront\", cc.SpriteFrame, function(err, spriteFrame) {\n                if (err) {\n                    console.log(err)\n                } else {\n                    self.node.getComponent(cc.Sprite).spriteFrame = spriteFrame\n                }\n            });\n\n            let nextTilePos = this.game.getTilePos(cc.p(currentPosition.x, currentPosition.y - this.enemyMaxSpeed));\n            if (!this.tryMoveToTarTile(nextTilePos)) {\n                let position = this.game.getTilePixelPos(cc.p(nextTilePos.x, nextTilePos.y - 1));\n                this.node.setPosition(currentPosition.x, position.y + 1);\n                this.node.ySpeed = 0;\n\n                if (this.tryMoveToTarTile(this.game.getTilePos(cc.p(currentPosition.x, currentPosition.y + this.game.tileSize.height + this.enemyMaxSpeed)))) {\n                    this.direction = DIR.UP\n                } else {\n                    this.direction = DIR.LEFT\n                }\n            } else {\n                this.ySpeed = -this.enemyMaxSpeed\n            }\n        }\n\n        if (this.direction !== DIR.UP && this.direction !== DIR.DOWN) {\n            this.ySpeed = 0\n        }\n\n        this.node.y += this.ySpeed\n    },\n\n    tryMoveToTarTile: function(newTile) {\n        //检测mainLayer是否可以通过\n        if (this.game.mainLayer.getTileGIDAt(newTile)) { //tile不为空，返回\n            return false;\n        }\n\n        if (this.game.bombTiles != null && this.game.bombTiles.length !== 0) {\n            for (let index in this.game.bombTiles) {\n                if (newTile.equals(this.game.bombTiles[index])) {\n                    return false\n                }\n            }\n        }\n\n        //检测是否与敌人碰撞\n        if(cc.pointEqualToPoint(this.game.playerTile, newTile)){\n            console.log('Touch enemy,you lose!');\n            return false;\n        }\n\n        return true\n    },\n\n    onCollisionEnter: function (other, self) {\n        this.game._enemyCount--;\n        this.node.destroy()\n    },\n});\n","// Learn cc.Class:\n//  - [Chinese] http://www.cocos.com/docs/creator/scripting/class.html\n//  - [English] http://www.cocos2d-x.org/docs/editors_and_tools/creator-chapters/scripting/class/index.html\n// Learn Attribute:\n//  - [Chinese] http://www.cocos.com/docs/creator/scripting/reference/attributes.html\n//  - [English] http://www.cocos2d-x.org/docs/editors_and_tools/creator-chapters/scripting/reference/attributes/index.html\n// Learn life-cycle callbacks:\n//  - [Chinese] http://www.cocos.com/docs/creator/scripting/life-cycle-callbacks.html\n//  - [English] http://www.cocos2d-x.org/docs/editors_and_tools/creator-chapters/scripting/life-cycle-callbacks/index.html\n\ncc.Class({\n    extends: cc.Component,\n\n    properties: {\n        // foo: {\n        //     // ATTRIBUTES:\n        //     default: null,        // The default value will be used only when the component attaching\n        //                           // to a node for the first time\n        //     type: cc.SpriteFrame, // optional, default is typeof default\n        //     serializable: true,   // optional, default is true\n        // },\n        // bar: {\n        //     get () {\n        //         return this._bar;\n        //     },\n        //     set (value) {\n        //         this._bar = value;\n        //     }\n        // },\n    },\n\n    // LIFE-CYCLE CALLBACKS:\n\n    // onLoad () {},\n\n    start () {\n\n    },\n\n    fireAnimationEnd: function() {\n        this.node.destroy()\n    },\n\n    // update (dt) {},\n});\n","// Learn cc.Class:\n//  - [Chinese] http://www.cocos.com/docs/creator/scripting/class.html\n//  - [English] http://www.cocos2d-x.org/docs/editors_and_tools/creator-chapters/scripting/class/index.html\n// Learn Attribute:\n//  - [Chinese] http://www.cocos.com/docs/creator/scripting/reference/attributes.html\n//  - [English] http://www.cocos2d-x.org/docs/editors_and_tools/creator-chapters/scripting/reference/attributes/index.html\n// Learn life-cycle callbacks:\n//  - [Chinese] http://www.cocos.com/docs/creator/scripting/life-cycle-callbacks.html\n//  - [English] http://www.cocos2d-x.org/docs/editors_and_tools/creator-chapters/scripting/life-cycle-callbacks/index.html\n\ncc.Class({\n    extends: cc.Component,\n\n    properties: {\n        // foo: {\n        //     // ATTRIBUTES:\n        //     default: null,        // The default value will be used only when the component attaching\n        //                           // to a node for the first time\n        //     type: cc.SpriteFrame, // optional, default is typeof default\n        //     serializable: true,   // optional, default is true\n        // },\n        // bar: {\n        //     get () {\n        //         return this._bar;\n        //     },\n        //     set (value) {\n        //         this._bar = value;\n        //     }\n        // },\n    },\n\n    // LIFE-CYCLE CALLBACKS:\n\n    // onLoad () {},\n\n    start () {\n\n    },\n\n    fireAnimationEnd: function() {\n        this.node.destroy()\n    },\n\n    // update (dt) {},\n});\n","// Learn cc.Class:\r//  - [Chinese] http://www.cocos.com/docs/creator/scripting/class.html\r//  - [English] http://www.cocos2d-x.org/docs/editors_and_tools/creator-chapters/scripting/class/index.html\r// Learn Attribute:\r//  - [Chinese] http://www.cocos.com/docs/creator/scripting/reference/attributes.html\r//  - [English] http://www.cocos2d-x.org/docs/editors_and_tools/creator-chapters/scripting/reference/attributes/index.html\r// Learn life-cycle callbacks:\r//  - [Chinese] http://www.cocos.com/docs/creator/scripting/life-cycle-callbacks.html\r//  - [English] http://www.cocos2d-x.org/docs/editors_and_tools/creator-chapters/scripting/life-cycle-callbacks/index.html\r\rcc.Class({\r    extends: cc.Component,\r\r    properties: {\r        // foo: {\r        //     // ATTRIBUTES:\r        //     default: null,        // The default value will be used only when the component attaching\r        //                           // to a node for the first time\r        //     type: cc.SpriteFrame, // optional, default is typeof default\r        //     serializable: true,   // optional, default is true\r        // },\r        // bar: {\r        //     get () {\r        //         return this._bar;\r        //     },\r        //     set (value) {\r        //         this._bar = value;\r        //     }\r        // },\r        maxMoveSpeed: 0,\r        maxBombCount: 1,\r        bombCount: 0,\r        fireLength: 0,\r\r        playerTile: {\r            default: cc.p(0, 0),\r        },\r\r        mapSize: {\r            default: cc.size(0,0)\r        },\r\r        tileSize: {\r            default: cc.size(0,0),\r        },\r\r        lblResult: {\r            default: null,\r            type: cc.Label\r        },\r\r        bombTiles: {\r            default: [],\r            type:[cc.Vec2]\r        },\r\r        bombPrefab: {\r            default: null,\r            type: cc.Prefab\r        },\r\r        player: {\r            default: null,\r            type: cc.Node\r        },\r\r        monster: {\r            default: null,\r            type: cc.Prefab\r        },\r\r        fireHor: {\r            default: null,\r            type: cc.Prefab\r        },\r\r        fireVer: {\r            default: null,\r            type: cc.Prefab\r        },\r\r        map: {\r            default: null,\r            type: cc.TiledMap\r        },\r\r        mainLayer: {\r            default: null,\r            type: cc.TiledLayer\r        },\r\r        hideLayer: {\r            default: null,\r            type: cc.TiledLayer\r        },\r\r        _enemyCount: 0,\r        _gameLost: false\r    },\r\r    // LIFE-CYCLE CALLBACKS:\r\r    onLoad: function () {\r        this.mapSize = this.node.getContentSize();\r        this.tileSize = this.map.getTileSize();\r\r        this.player.accLeft = false;\r        this.player.accRight = false;\r        this.player.accUp = false;\r        this.player.accDown = false;\r\r        this.player.xSpeed = 0;\r        this.player.ySpeed = 0;\r        this.bombTiles = [];\r\r        this.loadMap();\r\r        this.node.on('bombExplode', this.bombExploded, this)\r    },\r\r    start () {\r\r    },\r\r    loadMap: function(){\r        //获取对象层\r        let objects = this.map.getObjectGroup('objects');\r\r        let groupObjects = objects.getObjects();\r\r        var self = this;\r        groupObjects.forEach(function (value) {\r            if (value.getProperty('name') === 'player') {           //设置玩家瓦片坐标\r                let playerOriginPos = cc.p(value.getProperty(\"x\"), self.mapSize.height - value.getProperty(\"y\") * 2);\r                self.player.setPosition(playerOriginPos);\r                self.playerTile = self.getTilePos(self.player.position);\r            } else {                    //设置敌人瓦片坐标\r                let enemyPos = cc.p(value.getProperty(\"x\"), self.mapSize.height - value.getProperty(\"y\") - self.tileSize.height);\r                let newEnemy = cc.instantiate(self.monster);\r                newEnemy.getComponent('enemy').game = self;\r                newEnemy.setAnchorPoint(cc.p(0,0));\r                newEnemy.setPosition(enemyPos);\r                self.mainLayer.node.addChild(newEnemy);\r\r                self._enemyCount++;\r            }\r        })\r    },\r\r    willSetABombAction: function () {\r        this.setABomb()\r    },\r\r    setABomb: function() {\r        this.bombCount++;\r\r        let bomb = cc.instantiate(this.bombPrefab);\r        this.mainLayer.node.addChild(bomb);\r        var playerTile = this.getTilePos(this.player.getPosition());\r        var tilePosition = this.getTilePixelPos(playerTile);\r        if (this.player.x - tilePosition.x > this.tileSize.width / 2) {\r            playerTile = cc.p(playerTile.x + 1, playerTile.y)\r        }\r\r        tilePosition = this.getTilePixelPos(playerTile);\r        bomb.setPosition(cc.p(tilePosition.x + this.tileSize.width * 0.5, tilePosition.y + this.tileSize.height * 0.5));\r\r        this.bombTiles.push(playerTile);\r    },\r\r    bombExploded: function(event) {\r        event.stopPropagation();\r\r        let bombPosition = event.detail;\r        let bombTile = this.getTilePos(bombPosition);\r        this.createBombFire(cc.p(bombTile.x, bombTile.y));\r\r        if (bombTile.equals(this.playerTile)) {\r            this._gameLost = true\r        }\r\r        for (let index in this.bombTiles) {\r            if (bombTile.equals(this.bombTiles[index])) {\r                this.bombTiles.splice(index, 1)\r            }\r        }\r\r        this.bombCount--\r    },\r\r    createBombFire: function(bombTile) {\r        if (this.getTileType(this.mainLayer, cc.p(bombTile.x + 1, bombTile.y)) == null) {\r            let fireTile = cc.p(bombTile.x + 1, bombTile.y + 1);\r            let fireAnim = cc.instantiate(this.fireHor);\r            this.mainLayer.node.addChild(fireAnim);\r            fireAnim.setPosition(cc.p(fireTile.x * this.tileSize.width, (this.mapSize.height - fireTile.y  * this.tileSize.width)));\r\r            if (this.getTileType(this.mainLayer, cc.p(bombTile.x + 2, bombTile.y)) == null) {\r                let fireTile2 = cc.p(bombTile.x + 2, bombTile.y + 1);\r                let fireAnim2 = cc.instantiate(this.fireHor);\r                this.mainLayer.node.addChild(fireAnim2);\r                fireAnim2.setPosition(cc.p(fireTile2.x * this.tileSize.width, (this.mapSize.height - fireTile2.y * this.tileSize.width)))\r            } else if (this.getTileType(this.mainLayer, cc.p(bombTile.x + 2, bombTile.y)) === 'brick') {\r                this.mainLayer.removeTileAt(cc.p(bombTile.x + 2, bombTile.y))\r            } else if (this.getTileType(this.mainLayer, cc.p(bombTile.x + 2, bombTile.y)) === 'player') {\r                // cc.director.loadScene('Game')\r                this._gameLost = true\r            }\r        } else if (this.getTileType(this.mainLayer, cc.p(bombTile.x + 1, bombTile.y)) === 'brick') {\r            this.mainLayer.removeTileAt(cc.p(bombTile.x + 1, bombTile.y))\r        } else if (this.getTileType(this.mainLayer, cc.p(bombTile.x + 1, bombTile.y)) === 'player') {\r            this._gameLost = true\r        }\r        \r        if (this.getTileType(this.mainLayer, cc.p(bombTile.x - 1, bombTile.y)) == null) {\r            let fireTile = cc.p(bombTile.x - 1, bombTile.y + 1);\r            let fireAnim = cc.instantiate(this.fireHor);\r            this.mainLayer.node.addChild(fireAnim);\r            fireAnim.setPosition(cc.p(fireTile.x * this.tileSize.width, (this.mapSize.height - fireTile.y * this.tileSize.width)));\r\r            if (this.getTileType(this.mainLayer, cc.p(bombTile.x - 2, bombTile.y)) == null) {\r                let fireTile2 = cc.p(bombTile.x - 2, bombTile.y + 1);\r                let fireAnim2 = cc.instantiate(this.fireHor);\r                this.mainLayer.node.addChild(fireAnim2);\r                fireAnim2.setPosition(cc.p(fireTile2.x * this.tileSize.width, (this.mapSize.height - fireTile2.y * this.tileSize.width)))\r            } else if (this.getTileType(this.mainLayer, cc.p(bombTile.x - 2, bombTile.y)) === 'brick') {\r                this.mainLayer.removeTileAt(cc.p(bombTile.x - 2, bombTile.y))\r            } else if (this.getTileType(this.mainLayer, cc.p(bombTile.x - 2, bombTile.y)) === 'player') {\r                this._gameLost = true\r            }\r        } else if (this.getTileType(this.mainLayer, cc.p(bombTile.x - 1, bombTile.y)) === 'brick') {\r            this.mainLayer.removeTileAt(cc.p(bombTile.x - 1, bombTile.y))\r        } else if (this.getTileType(this.mainLayer, cc.p(bombTile.x - 1, bombTile.y)) === 'player') {\r            this._gameLost = true\r        }\r\r        if (this.getTileType(this.mainLayer, cc.p(bombTile.x, bombTile.y + 1)) == null) {\r            let fireTile = cc.p(bombTile.x, bombTile.y + 2);\r            let fireAnim = cc.instantiate(this.fireVer);\r            this.mainLayer.node.addChild(fireAnim);\r            fireAnim.setPosition(cc.p(fireTile.x * this.tileSize.width, (this.mapSize.height - fireTile.y * this.tileSize.width)));\r\r            if (this.getTileType(this.mainLayer, cc.p(bombTile.x, bombTile.y + 2)) == null) {\r                let fireTile2 = cc.p(bombTile.x, bombTile.y + 3);\r                let fireAnim2 = cc.instantiate(this.fireVer);\r                this.mainLayer.node.addChild(fireAnim2);\r                fireAnim2.setPosition(cc.p(fireTile2.x * this.tileSize.width, (this.mapSize.height - fireTile2.y * this.tileSize.width)))\r            } else if (this.getTileType(this.mainLayer, cc.p(bombTile.x, bombTile.y + 2)) === 'brick') {\r                this.mainLayer.removeTileAt(cc.p(bombTile.x, bombTile.y + 2))\r            } else if (this.getTileType(this.mainLayer, cc.p(bombTile.x, bombTile.y + 2)) === 'player') {\r                this._gameLost = true\r            }\r        } else if (this.getTileType(this.mainLayer, cc.p(bombTile.x, bombTile.y + 1)) === 'brick') {\r            this.mainLayer.removeTileAt(cc.p(bombTile.x, bombTile.y + 1))\r        } else if (this.getTileType(this.mainLayer, cc.p(bombTile.x, bombTile.y + 1)) === 'player') {\r            this._gameLost = true\r        }\r\r        if (this.getTileType(this.mainLayer, cc.p(bombTile.x, bombTile.y - 1)) == null) {\r            let fireTile = cc.p(bombTile.x, bombTile.y);\r            let fireAnim = cc.instantiate(this.fireVer);\r            this.mainLayer.node.addChild(fireAnim);\r            fireAnim.setPosition(cc.p(fireTile.x * this.tileSize.width, (this.mapSize.height - fireTile.y * this.tileSize.width)));\r\r            if (this.getTileType(this.mainLayer, cc.p(bombTile.x, bombTile.y - 2)) == null) {\r                let fireTile2 = cc.p(bombTile.x, bombTile.y - 1);\r                let fireAnim2 = cc.instantiate(this.fireVer);\r                this.mainLayer.node.addChild(fireAnim2);\r                fireAnim2.setPosition(cc.p(fireTile2.x * this.tileSize.width, (this.mapSize.height - fireTile2.y * this.tileSize.width)))\r            } else if (this.getTileType(this.mainLayer, cc.p(bombTile.x, bombTile.y - 2)) === 'brick') {\r                this.mainLayer.removeTileAt(cc.p(bombTile.x, bombTile.y - 2))\r            } else if (this.getTileType(this.mainLayer, cc.p(bombTile.x, bombTile.y - 2)) === 'player') {\r                this._gameLost = true\r            }\r        } else if (this.getTileType(this.mainLayer, cc.p(bombTile.x, bombTile.y - 1)) === 'brick') {\r            this.mainLayer.removeTileAt(cc.p(bombTile.x, bombTile.y - 1))\r        } else if (this.getTileType(this.mainLayer, cc.p(bombTile.x, bombTile.y - 1)) === 'player') {\r            this._gameLost = true\r        }\r    },\r\r    update (dt) {\r\r        if (this._gameLost) {\r            this.lblResult.node.opacity = 255;\r            return\r        }\r\r        if (this._enemyCount === 0) {\r            this.lblResult.string = \"You Win!\";\r            this.lblResult.node.opacity = 255;\r            return\r        }\r\r        let currentPlayerPosition = this.player.getPosition();\r\r        if (this.player.accLeft) {\r            let self = this;\r            cc.loader.loadRes(\"Player/left\", cc.SpriteFrame, function(err, spriteFrame) {\r                if (err) {\r                    console.log(err)\r                } else {\r                    self.player.getComponent(cc.Sprite).spriteFrame = spriteFrame\r                }\r            });\r\r            let nextTilePos = this.getTilePos(cc.p(currentPlayerPosition.x - this.maxMoveSpeed, currentPlayerPosition.y));\r            if (!this.tryMoveToTarTile(nextTilePos)) {\r\r                //(当前玩家y轴坐标 + 瓦片高度的一半)计算下一块瓦片是否可以通过\r                let tilePos = this.getTilePos(cc.p(currentPlayerPosition.x - this.maxMoveSpeed, currentPlayerPosition.y + this.tileSize.height * 0.5));\r                if (!this.tryMoveToTarTile(tilePos)) {  //不能通过, 水平速度 = 0\r                    let position = this.getTilePixelPos(cc.p(nextTilePos.x + 1, nextTilePos.y));\r                    this.player.setPosition(position.x + 1, currentPlayerPosition.y);\r\r                    this.player.xSpeed = 0\r                } else {  //可以通过, 将玩家位置移动至瓦片位置.  水平位置 = 当前位置 + 水平速度 * 1.5; (1.5倍在移动玩家时, 视觉上不至于出现明显残影)\r                    let newPosition = this.getTilePixelPos(tilePos);\r                    this.player.setPosition(currentPlayerPosition.x - this.maxMoveSpeed * 1.0, newPosition.y + 1)\r                }\r            } else {  //可以通过\r\r                //计算(玩家锚点位置y轴坐标 + 瓦片高度)正对的瓦片是否可以通过\r                let tilePos = this.getTilePos(cc.p(currentPlayerPosition.x - this.maxMoveSpeed, currentPlayerPosition.y + this.tileSize.height - 2));\r                if (!this.tryMoveToTarTile(tilePos)) {      //无法通过, 将玩家移动至玩家所在瓦片的y坐标位置\r                    let currentPlayerTile = this.getTilePos(this.player.getPosition());\r                    let position = this.getTilePixelPos(currentPlayerTile);\r                    this.player.setPosition(currentPlayerPosition.x - this.maxMoveSpeed * 1.0, position.y + 1)\r                } else {  //可以通过, 即当前瓦片所在行没有阻挡\r                    this.player.xSpeed = -this.maxMoveSpeed\r                }\r            }\r        }\r\r        if (this.player.accRight) {\r            let self = this;\r            cc.loader.loadRes(\"Player/right\", cc.SpriteFrame, function(err, spriteFrame) {\r                if (err) {\r                    console.log(err)\r                } else {\r                    self.player.getComponent(cc.Sprite).spriteFrame = spriteFrame\r                }\r            });\r\r            //玩家锚点位置正对的瓦片是否能通过\r            let nextTilePos = this.getTilePos(cc.p(currentPlayerPosition.x + this.player.width + this.maxMoveSpeed, currentPlayerPosition.y));\r            if (!this.tryMoveToTarTile(nextTilePos)) {   //不能通过, 计算相邻位置瓦片\r\r                //(当前玩家y轴坐标 + 瓦片高度的一半)计算下一块瓦片是否可以通过\r                let tilePos = this.getTilePos(cc.p(currentPlayerPosition.x + this.player.width + this.maxMoveSpeed, currentPlayerPosition.y + this.tileSize.height * 0.5));\r                if (!this.tryMoveToTarTile(tilePos)) {  //不能通过, 水平速度 = 0\r                    let position = this.getTilePixelPos(cc.p(nextTilePos.x - 1, nextTilePos.y));\r                    this.player.setPosition(position.x + 1, currentPlayerPosition.y);\r\r                    this.player.xSpeed = 0\r                } else {  //可以通过, 将玩家位置移动至瓦片位置.  水平位置 = 当前位置 + 水平速度 * 1.5; (1.5倍在移动玩家时, 视觉上不至于出现明显残影)\r                    let newPosition = this.getTilePixelPos(tilePos);\r                    this.player.setPosition(currentPlayerPosition.x + this.maxMoveSpeed * 1.0, newPosition.y + 1)\r                }\r            } else {  //可以通过\r\r                //计算(玩家锚点位置y轴坐标 + 瓦片高度)正对的瓦片是否可以通过\r                let tilePos = this.getTilePos(cc.p(currentPlayerPosition.x + this.player.width + this.maxMoveSpeed, currentPlayerPosition.y + this.tileSize.height - 2));\r                if (!this.tryMoveToTarTile(tilePos)) {      //无法通过, 将玩家移动至玩家所在瓦片的y坐标位置\r                    let currentPlayerTile = this.getTilePos(this.player.getPosition());\r                    let position = this.getTilePixelPos(currentPlayerTile);\r                    this.player.setPosition(currentPlayerPosition.x + this.maxMoveSpeed * 1.0, position.y + 1)\r                } else {  //可以通过, 即当前瓦片所在行没有阻挡\r                    this.player.xSpeed = this.maxMoveSpeed\r                }\r            }\r        }\r\r        if (!this.player.accLeft && !this.player.accRight) {\r            this.player.xSpeed = 0\r        }\r\r        this.player.x += this.player.xSpeed;\r\r        if (this.player.accUp) {\r            let self = this;\r            cc.loader.loadRes(\"Player/back\", cc.SpriteFrame, function(err, spriteFrame) {\r                if (err) {\r                    console.log(err)\r                } else {\r                    self.player.getComponent(cc.Sprite).spriteFrame = spriteFrame\r                }\r            });\r\r            //玩家资源图的宽度比瓦片宽度更小, 不能用玩家位置+瓦片宽度, 因为玩家x坐标 = 瓦片坐标 + 1\r            let nextTilePos = this.getTilePos(cc.p(currentPlayerPosition.x, currentPlayerPosition.y + this.tileSize.height + this.maxMoveSpeed));\r            if (!this.tryMoveToTarTile(nextTilePos)) {\r\r                let tilePos = this.getTilePos(cc.p(currentPlayerPosition.x + this.player.width * 0.5, currentPlayerPosition.y + this.tileSize.height + this.maxMoveSpeed));\r                if (!this.tryMoveToTarTile(tilePos)) {\r                    let position = this.getTilePixelPos(cc.p(nextTilePos.x, nextTilePos.y + 1));\r                    this.player.setPosition(currentPlayerPosition.x, position.y + 1);\r                    this.player.ySpeed = 0;\r                } else {\r                    let newPosition = this.getTilePixelPos(tilePos);\r                    this.player.setPosition(newPosition.x + 1, currentPlayerPosition.y + this.maxMoveSpeed * 1.0)\r                }\r            } else {\r                let tilePos = this.getTilePos(cc.p(currentPlayerPosition.x + this.player.width, currentPlayerPosition.y + this.tileSize.height + this.maxMoveSpeed));\r                if (!this.tryMoveToTarTile(tilePos)) {\r                    let currentPlayerTile = this.getTilePos(this.player.getPosition());\r                    let position = this.getTilePixelPos(currentPlayerTile);\r                    this.player.setPosition(position.x + 1, currentPlayerPosition.y + this.maxMoveSpeed * 1.0)\r                } else {\r                    this.player.ySpeed = this.maxMoveSpeed\r                }\r            }\r        }\r\r        if (this.player.accDown) {\r            let self = this;\r            cc.loader.loadRes(\"Player/front\", cc.SpriteFrame, function(err, spriteFrame) {\r                if (err) {\r                    console.log(err)\r                } else {\r                    self.player.getComponent(cc.Sprite).spriteFrame = spriteFrame\r                }\r            });\r\r            let nextTilePos = this.getTilePos(cc.p(currentPlayerPosition.x, currentPlayerPosition.y - this.maxMoveSpeed));\r            if (!this.tryMoveToTarTile(nextTilePos)) {\r\r                let tilePos = this.getTilePos(cc.p(currentPlayerPosition.x + this.player.width, currentPlayerPosition.y - this.maxMoveSpeed));\r                if (!this.tryMoveToTarTile(tilePos)) {\r                    let position = this.getTilePixelPos(cc.p(nextTilePos.x, nextTilePos.y - 1));\r                    this.player.setPosition(currentPlayerPosition.x, position.y + 1);\r                    this.player.ySpeed = 0;\r                } else {\r                    let newPosition = this.getTilePixelPos(tilePos);\r                    this.player.setPosition(newPosition.x + 1, currentPlayerPosition.y - this.maxMoveSpeed * 1.0)\r                }\r            } else {\r                let tilePos = this.getTilePos(cc.p(currentPlayerPosition.x + this.player.width, currentPlayerPosition.y - this.maxMoveSpeed));\r                if (!this.tryMoveToTarTile(tilePos)) {\r                    let currentPlayerTile = this.getTilePos(this.player.getPosition());\r                    let position = this.getTilePixelPos(currentPlayerTile);\r                    this.player.setPosition(position.x + 1, currentPlayerPosition.y - this.maxMoveSpeed * 1.0)\r                } else {\r                    this.player.ySpeed = -this.maxMoveSpeed\r                }\r            }\r        }\r\r        if (!this.player.accUp && !this.player.accDown) {\r            this.player.ySpeed = 0\r        }\r\r        this.player.y += this.player.ySpeed;\r\r        this.updatePlayerTilePos()\r    },\r\r    tryMoveToTarTile: function(newTile) {\r        //检测mainLayer是否可以通过\r        if (this.mainLayer.getTileGIDAt(newTile)) { //tile不为空，返回\r            return false;\r        }\r\r        if (this.bombTiles != null && this.bombTiles.length !== 0) {\r            for (let index in this.bombTiles) {\r                if (newTile.equals(this.bombTiles[index])) {\r                    return false\r                }\r            }\r        }\r\r        return true\r    },\r\r    //获得tile的type属性值\r    getTileType:function(layer,tile) {\r        let prop = this.map.getPropertiesForGID(layer.getTileGIDAt(tile));\r        if(prop) {\r            return prop.type;\r        } else if (tile.equals(this.playerTile)) {\r            return 'player'\r        } else {\r            return null\r        }\r    },\r\r    //将地图中的像素单位坐标转化为瓦片单位坐标\r    getTilePos: function(posInPixel) {\r        let x = Math.floor(posInPixel.x / this.tileSize.width);\r        let y = Math.floor((this.mapSize.height - posInPixel.y) / this.tileSize.height);\r\r        return cc.p(x, y);\r    },\r\r    /*将瓦片坐标转换为像素单位*/\r    getTilePixelPos: function(tilePos) {\r        let x = tilePos.x * this.tileSize.width;\r        let y = this.mapSize.height - (tilePos.y + 1) * this.tileSize.height;\r\r        return cc.p(x, y)\r    },\r\r    /*更新玩家瓦片坐标*/\r    updatePlayerTilePos: function () {\r        var tmpPlayerTile = this.getTilePos(this.player.getPosition());\r        let position = this.getTilePixelPos(tmpPlayerTile);\r\r        if (this.player.getPosition().x - position.x > this.player.width / 2) {\r            tmpPlayerTile = cc.p(tmpPlayerTile.x + 1, tmpPlayerTile.y);\r        }\r\r        this.playerTile = tmpPlayerTile;\r    }\r});\r","// Learn cc.Class:\n//  - [Chinese] http://www.cocos.com/docs/creator/scripting/class.html\n//  - [English] http://www.cocos2d-x.org/docs/editors_and_tools/creator-chapters/scripting/class/index.html\n// Learn Attribute:\n//  - [Chinese] http://www.cocos.com/docs/creator/scripting/reference/attributes.html\n//  - [English] http://www.cocos2d-x.org/docs/editors_and_tools/creator-chapters/scripting/reference/attributes/index.html\n// Learn life-cycle callbacks:\n//  - [Chinese] http://www.cocos.com/docs/creator/scripting/life-cycle-callbacks.html\n//  - [English] http://www.cocos2d-x.org/docs/editors_and_tools/creator-chapters/scripting/life-cycle-callbacks/index.html\n\nvar Common = require('JoystickDefines');\n\ncc.Class({\n    extends: cc.Component,\n\n    properties: {\n        _bomberGame: {\n            default: null,\n            displayName: '游戏场景节点'\n        },\n\n        stickDot: {\n            default: null,\n            type: cc.Node,\n            displayName: '摇杆节点'\n        },\n\n        _angle: {\n            default: null,\n            displayName: '当前触摸的角度'\n        },\n\n        _radian: {\n            default: null,\n            displayName: '弧度'\n        },\n\n        stickType: {\n            default: Common.DirectionType.FOUR,\n            type: Common.DirectionType,\n            displayName: '摇杆方向'\n        }\n    },\n\n    // LIFE-CYCLE CALLBACKS:\n\n    onLoad () {\n        this._bomberGame = this.node.parent.getComponent('game');\n\n        console.log(this._bomberGame);\n\n        this.initJoyStickTouchEvent()\n    },\n\n    start () {\n\n    },\n\n    /*圆圈的触摸监听*/\n    initJoyStickTouchEvent: function()\n    {\n        var self = this;\n\n        self.node.on(cc.Node.EventType.TOUCH_START, this._touchStartEvent, self);\n\n        self.node.on(cc.Node.EventType.TOUCH_MOVE, this._touchMoveEvent, self);\n\n        // 触摸在圆圈内离开或在圆圈外离开后，摇杆归位，player速度为0\n        self.node.on(cc.Node.EventType.TOUCH_END, this._touchEndEvent, self);\n\n        self.node.on(cc.Node.EventType.TOUCH_CANCEL, this._touchEndEvent, self);\n    },\n\n    //计算两点间的距离并返回\n    _getDistance: function(pos1, pos2)\n    {\n        return Math.sqrt(Math.pow(pos1.x - pos2.x, 2) + Math.pow(pos1.y - pos2.y, 2));\n    },\n\n    /*角度/弧度转换\n    角度 = 弧度 * 180 / Math.PI\n    弧度 = 角度 * Math.PI / 180*/\n    //计算弧度并返回\n    _getRadian: function(point)\n    {\n        this._radian = Math.PI / 180 * this._getAngle(point);\n        return this._radian;\n    },\n\n    //计算角度并返回\n    _getAngle: function(point)\n    {\n\n        var pos = cc.p(0, 0)//this.node.getPosition();\n        this._angle = Math.atan2(point.y - pos.y, point.x - pos.x) * (180/Math.PI);\n        return this._angle;\n    },\n\n    //设置实际速度\n    _setSpeed: function(point)\n    {\n        //触摸点和遥控杆中心的距离\n        var distance = this._getDistance(point, this.node.getPosition());\n\n        //如果半径\n        if(distance < this._radius)\n        {\n            this._speed = this._speed1;\n        }\n        else\n        {\n            this._speed = this._speed2;\n        }\n    },\n\n    _touchStartEvent: function(event) {\n        // 获取触摸位置的世界坐标转换成圆圈的相对坐标（以圆圈的锚点为基准）\n        var touchPos = this.node.convertToNodeSpaceAR(event.getLocation());\n        //触摸点与圆圈中心的距离\n        var distance = this._getDistance(touchPos,cc.p(0,0));\n        //圆圈半径\n        var radius = this.node.width / 2;\n        // 记录摇杆位置，给touch move使用\n        this._stickPos = touchPos;\n        var posX = /*this.node.getPosition().x + */touchPos.x;\n        var posY = /*this.node.getPosition().y + */touchPos.y;\n        //手指在圆圈内触摸,控杆跟随触摸点\n        if(radius > distance)\n        {\n            this.stickDot.setPosition(cc.p(posX, posY));\n            return true;\n        }\n\n        return false;\n    },\n\n    _touchMoveEvent: function(event){\n        var touchPos = this.node.convertToNodeSpaceAR(event.getLocation());\n        var distance = this._getDistance(touchPos,cc.p(0,0));\n        var radius = this.node.width / 2;\n        // 由于摇杆的postion是以父节点为锚点，所以定位要加上ring和dot当前的位置(stickX,stickY)\n\n        if(radius > distance)\n        {\n            console.log(cc.p(touchPos.x, touchPos.y))\n            this.stickDot.setPosition(cc.p(touchPos.x, touchPos.y));\n            this._getAngle(cc.p(touchPos.x,touchPos.y));\n        }\n        else\n        {\n            var posX = /*this.node.getPosition().x + */touchPos.x;\n            var posY = /*this.node.getPosition().y + */touchPos.y;\n            //控杆永远保持在圈内，并在圈内跟随触摸更新角度\n            var x = /*this.node.getPosition().x + */Math.cos(this._getRadian(cc.p(posX,posY))) * radius;\n            var y = /*this.node.getPosition().y + */Math.sin(this._getRadian(cc.p(posX,posY))) * radius;\n            this.stickDot.setPosition(cc.p(x, y));\n            this._getAngle(cc.p(posX,posY));\n        }\n        //更新角度\n        this._fourDirectionsMove()\n    },\n\n    _touchEndEvent: function(){\n        this.stickDot.setPosition(cc.p(0, 0));\n        this._speed = 0;\n        this._angle = null;\n\n        this._fourDirectionsMove()\n    },\n\n    /*四方向移动*/\n    _fourDirectionsMove: function() {\n        this._bomberGame.player.accLeft = false;\n        this._bomberGame.player.accRight = false;\n        this._bomberGame.player.accUp = false;\n        this._bomberGame.player.accDown = false;\n\n        if (this._angle == null) {\n            return\n        }\n\n        if (this._angle < 45 && this._angle > -45) {\n            this._bomberGame.player.accRight = true\n        }\n\n        if (this._angle > 45 && this._angle < 135) {\n            this._bomberGame.player.accUp = true\n        }\n\n        if ((this._angle > 135 && this._angle < 180) || (this._angle > -180 && this._angle < -135)) {\n            this._bomberGame.player.accLeft = true\n        }\n\n        if (this._angle > -135 && this._angle < -45) {\n            this._bomberGame.player.accDown = true\n        }\n    },\n\n    // update (dt) {},\n});\n"],"sourceRoot":"/source/","file":"project.js"}