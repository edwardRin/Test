{"version":3,"sources":["assets/Scripts/JoystickDefines.js","assets/Scripts/bomb.js","assets/Scripts/enemy.js","assets/Scripts/fireHorAnim.js","assets/Scripts/fireVerAnim.js","assets/Scripts/game.js","assets/Scripts/joyStick.js"],"names":["module","exports","DirectionType","cc","Enum","FOUR","EIGHT","ALL","Class","extends","Component","properties","onLoad","director","getCollisionManager","enabled","start","explode","event","Event","EventCustom","setUserData","this","node","position","dispatchEvent","onAnimCompleted","destroy","DIR","UP","RIGHT","DOWN","LEFT","enemyMaxSpeed","game","default","serializable","direction","type","xSpeed","ySpeed","update","dt","_gameLost","currentPosition","getPosition","self","loader","loadRes","SpriteFrame","err","spriteFrame","console","log","getComponent","Sprite","nextTilePos","getTilePos","p","x","y","tryMoveToTarTile","getTilePixelPos","setPosition","newTilePos","width","_self","_nextTilePos","_position","newNextTile","_self2","_nextTilePos2","tileSize","height","_position2","_self3","_nextTilePos3","_position3","newTile","mainLayer","getTileGIDAt","bombTiles","length","index","equals","pointEqualToPoint","playerTile","onCollisionEnter","other","onDestroy","_enemyCount","fireAnimationEnd","maxMoveSpeed","maxBombCount","bombCount","fireLength","mapSize","size","lblResult","Label","Vec2","bombPrefab","Prefab","player","Node","monster","fireHor","fireVer","map","TiledMap","TiledLayer","hideLayer","getContentSize","getTileSize","accLeft","accRight","accUp","accDown","loadMap","on","bombExploded","getObjectGroup","getObjects","forEach","value","getProperty","playerOriginPos","enemyPos","newEnemy","instantiate","setAnchorPoint","addChild","willSetABombAction","setABomb","bomb","tilePosition","push","stopPropagation","bombPosition","detail","bombTile","createBombFire","splice","getTileType","fireTile","fireAnim","fireTile2","fireAnim2","removeTileAt","_fireTile","_fireAnim","_fireTile2","_fireAnim2","_fireTile3","_fireAnim3","_fireTile4","_fireAnim4","_fireTile5","_fireAnim5","_fireTile6","_fireAnim6","restart","string","opacity","currentPlayerPosition","_tilePos","currentPlayerTile","tilePos","newPosition","_tilePos3","_currentPlayerTile","_tilePos2","_newPosition","_tilePos5","_currentPlayerTile2","_position5","_tilePos4","_newPosition2","_position4","_tilePos7","_currentPlayerTile3","_position7","_tilePos6","_newPosition3","_position6","updatePlayerTilePos","layer","tile","prop","getPropertiesForGID","posInPixel","Math","floor","tmpPlayerTile","Common","require","_bomberGame","displayName","stickDot","_angle","_radian","stickType","parent","initJoyStickTouchEvent","EventType","TOUCH_START","_touchStartEvent","TOUCH_MOVE","_touchMoveEvent","TOUCH_END","_touchEndEvent","TOUCH_CANCEL","_getDistance","pos1","pos2","sqrt","pow","_getRadian","point","PI","_getAngle","pos","atan2","_setSpeed","_radius","_speed","_speed1","_speed2","touchPos","convertToNodeSpaceAR","getLocation","distance","radius","_stickPos","posX","posY","cos","sin","_fourDirectionsMove"],"mappings":"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","sourcesContent":["module.exports = {\n    DirectionType: cc.Enum({\n        FOUR: 4,\n        EIGHT: 8,\n        ALL: 0,\n    }),\n};","// Learn cc.Class:\n//  - [Chinese] http://www.cocos.com/docs/creator/scripting/class.html\n//  - [English] http://www.cocos2d-x.org/docs/editors_and_tools/creator-chapters/scripting/class/index.html\n// Learn Attribute:\n//  - [Chinese] http://www.cocos.com/docs/creator/scripting/reference/attributes.html\n//  - [English] http://www.cocos2d-x.org/docs/editors_and_tools/creator-chapters/scripting/reference/attributes/index.html\n// Learn life-cycle callbacks:\n//  - [Chinese] http://www.cocos.com/docs/creator/scripting/life-cycle-callbacks.html\n//  - [English] http://www.cocos2d-x.org/docs/editors_and_tools/creator-chapters/scripting/life-cycle-callbacks/index.html\n\ncc.Class({\n    extends: cc.Component,\n\n    properties: {\n        // foo: {\n        //     // ATTRIBUTES:\n        //     default: null,        // The default value will be used only when the component attaching\n        //                           // to a node for the first time\n        //     type: cc.SpriteFrame, // optional, default is typeof default\n        //     serializable: true,   // optional, default is true\n        // },\n        // bar: {\n        //     get () {\n        //         return this._bar;\n        //     },\n        //     set (value) {\n        //         this._bar = value;\n        //     }\n        // },\n    },\n\n    // LIFE-CYCLE CALLBACKS:\n\n    onLoad () {\n        var manager = cc.director.getCollisionManager();\n        manager.enabled = true\n    },\n\n    start () {\n\n    },\n\n    explode: function() {\n        let event = new cc.Event.EventCustom('bombExplode', true)\n        event.setUserData(this.node.position)\n        this.node.dispatchEvent(event)\n    },\n\n    onAnimCompleted: function () {\n        this.node.destroy()\n    },\n\n    // update (dt) {},\n});\n","// Learn cc.Class:\n//  - [Chinese] http://www.cocos.com/docs/creator/scripting/class.html\n//  - [English] http://www.cocos2d-x.org/docs/editors_and_tools/creator-chapters/scripting/class/index.html\n// Learn Attribute:\n//  - [Chinese] http://www.cocos.com/docs/creator/scripting/reference/attributes.html\n//  - [English] http://www.cocos2d-x.org/docs/editors_and_tools/creator-chapters/scripting/reference/attributes/index.html\n// Learn life-cycle callbacks:\n//  - [Chinese] http://www.cocos.com/docs/creator/scripting/life-cycle-callbacks.html\n//  - [English] http://www.cocos2d-x.org/docs/editors_and_tools/creator-chapters/scripting/life-cycle-callbacks/index.html\n\nvar DIR = cc.Enum({\n    UP : -1,\n    RIGHT : 2,\n    DOWN : 1,\n    LEFT : -2\n});\n\ncc.Class({\n    extends: cc.Component,\n\n    properties: {\n        // foo: {\n        //     // ATTRIBUTES:\n        //     default: null,        // The default value will be used only when the component attaching\n        //                           // to a node for the first time\n        //     type: cc.SpriteFrame, // optional, default is typeof default\n        //     serializable: true,   // optional, default is true\n        // },\n        // bar: {\n        //     get () {\n        //         return this._bar;\n        //     },\n        //     set (value) {\n        //         this._bar = value;\n        //     }\n        // },\n\n        enemyMaxSpeed: 0,\n\n        game: {\n            default: null,\n            serializable: false\n        },\n\n        direction: {\n            default: DIR.UP,\n            type: DIR\n        }\n    },\n\n    // LIFE-CYCLE CALLBACKS:\n\n    onLoad () {\n        this.xSpeed = 0\n        this.ySpeed = 0\n\n        this.enemyMaxSpeed = 5\n    },\n\n    start () {\n\n    },\n\n    update (dt) {\n\n        if (this.game._gameLost) {\n            return\n        }\n\n        let currentPosition = this.node.getPosition();\n\n        if (this.direction === DIR.LEFT) {\n            let self = this;\n            cc.loader.loadRes(\"monster/monsterLeft\", cc.SpriteFrame, function(err, spriteFrame) {\n                if (err) {\n                    console.log(err)\n                } else {\n                    self.node.getComponent(cc.Sprite).spriteFrame = spriteFrame\n                }\n            });\n\n            let nextTilePos = this.game.getTilePos(cc.p(currentPosition.x - this.enemyMaxSpeed, currentPosition.y));\n            if (!this.tryMoveToTarTile(nextTilePos)) {\n                let position = this.game.getTilePixelPos(cc.p(nextTilePos.x + 1, nextTilePos.y));\n                this.node.setPosition(cc.p(position.x + 1, currentPosition.y))\n                this.xSpeed = 0\n\n                //尝试反向\n                let newTilePos = this.game.getTilePos(cc.p(currentPosition.x + this.node.width + this.enemyMaxSpeed, currentPosition.y))\n                if (this.tryMoveToTarTile(newTilePos)) {\n                    this.direction = DIR.RIGHT\n                } else {\n                    this.direction = DIR.UP\n                }\n            } else {  //可以通过\n                this.xSpeed = -this.enemyMaxSpeed\n            }\n        }\n\n        if (this.direction === DIR.RIGHT) {\n            let self = this;\n            cc.loader.loadRes(\"monster/monsterRight\", cc.SpriteFrame, function(err, spriteFrame) {\n                if (err) {\n                    console.log(err)\n                } else {\n                    self.node.getComponent(cc.Sprite).spriteFrame = spriteFrame\n                }\n            });\n\n            let nextTilePos = this.game.getTilePos(cc.p(currentPosition.x + this.node.width + this.enemyMaxSpeed, currentPosition.y));\n            if (!this.tryMoveToTarTile(nextTilePos)) {\n                let position = this.game.getTilePixelPos(cc.p(nextTilePos.x - 1, nextTilePos.y));\n                this.node.setPosition(cc.p(position.x + 1, currentPosition.y))\n                this.xSpeed = 0\n\n                //尝试反向\n                let newNextTile = this.game.getTilePos(cc.p(currentPosition.x - this.enemyMaxSpeed, currentPosition.y))\n                if (this.tryMoveToTarTile(newNextTile)) {\n                    this.direction = DIR.LEFT\n                } else {\n                    //反向也无法通过, 尝试向下\n                    this.direction = DIR.DOWN\n                }\n            } else {\n                this.xSpeed = this.enemyMaxSpeed\n            }\n        }\n\n        if (this.direction !== DIR.LEFT && this.direction !== DIR.RIGHT) {\n            this.xSpeed = 0\n        }\n\n        this.node.x += this.xSpeed\n\n        if (this.direction === DIR.UP) {\n            let self = this;\n            cc.loader.loadRes(\"monster/monsterBack\", cc.SpriteFrame, function(err, spriteFrame) {\n                if (err) {\n                    console.log(err)\n                } else {\n                    self.node.getComponent(cc.Sprite).spriteFrame = spriteFrame\n                }\n            });\n\n            let nextTilePos = this.game.getTilePos(cc.p(currentPosition.x, currentPosition.y + this.game.tileSize.height + this.enemyMaxSpeed));\n            if (!this.tryMoveToTarTile(nextTilePos)) {\n                let position = this.game.getTilePixelPos(cc.p(nextTilePos.x, nextTilePos.y + 1));\n                this.node.setPosition(currentPosition.x, position.y + 1);\n                this.node.ySpeed = 0;\n\n                if (this.tryMoveToTarTile(this.game.getTilePos(cc.p(currentPosition.x, currentPosition.y - this.enemyMaxSpeed)))) {\n                    this.direction = DIR.DOWN\n                } else {\n                    this.direction = DIR.LEFT\n                }\n            } else {\n                this.ySpeed = this.enemyMaxSpeed\n            }\n        }\n\n        if (this.direction === DIR.DOWN) {\n            let self = this;\n            cc.loader.loadRes(\"monster/monsterFront\", cc.SpriteFrame, function(err, spriteFrame) {\n                if (err) {\n                    console.log(err)\n                } else {\n                    self.node.getComponent(cc.Sprite).spriteFrame = spriteFrame\n                }\n            });\n\n            let nextTilePos = this.game.getTilePos(cc.p(currentPosition.x, currentPosition.y - this.enemyMaxSpeed));\n            if (!this.tryMoveToTarTile(nextTilePos)) {\n                let position = this.game.getTilePixelPos(cc.p(nextTilePos.x, nextTilePos.y - 1));\n                this.node.setPosition(currentPosition.x, position.y + 1);\n                this.node.ySpeed = 0;\n\n                if (this.tryMoveToTarTile(this.game.getTilePos(cc.p(currentPosition.x, currentPosition.y + this.game.tileSize.height + this.enemyMaxSpeed)))) {\n                    this.direction = DIR.UP\n                } else {\n                    this.direction = DIR.LEFT\n                }\n            } else {\n                this.ySpeed = -this.enemyMaxSpeed\n            }\n        }\n\n        if (this.direction !== DIR.UP && this.direction !== DIR.DOWN) {\n            this.ySpeed = 0\n        }\n\n        this.node.y += this.ySpeed\n    },\n\n    tryMoveToTarTile: function(newTile) {\n        //检测mainLayer是否可以通过\n        if (this.game.mainLayer.getTileGIDAt(newTile)) { //tile不为空，返回\n            return false;\n        }\n\n        if (this.game.bombTiles != null && this.game.bombTiles.length !== 0) {\n            for (let index in this.game.bombTiles) {\n                if (newTile.equals(this.game.bombTiles[index])) {\n                    return false\n                }\n            }\n        }\n\n        //检测是否与敌人碰撞\n        if(cc.pointEqualToPoint(this.game.playerTile, newTile)){\n            this.game._gameLost = true;\n            return false;\n        }\n\n        return true\n    },\n\n    onCollisionEnter: function (other, self) {\n        this.node.destroy()\n    },\n\n    onDestroy() {\n        this.game._enemyCount--;\n    }\n});\n","// Learn cc.Class:\n//  - [Chinese] http://www.cocos.com/docs/creator/scripting/class.html\n//  - [English] http://www.cocos2d-x.org/docs/editors_and_tools/creator-chapters/scripting/class/index.html\n// Learn Attribute:\n//  - [Chinese] http://www.cocos.com/docs/creator/scripting/reference/attributes.html\n//  - [English] http://www.cocos2d-x.org/docs/editors_and_tools/creator-chapters/scripting/reference/attributes/index.html\n// Learn life-cycle callbacks:\n//  - [Chinese] http://www.cocos.com/docs/creator/scripting/life-cycle-callbacks.html\n//  - [English] http://www.cocos2d-x.org/docs/editors_and_tools/creator-chapters/scripting/life-cycle-callbacks/index.html\n\ncc.Class({\n    extends: cc.Component,\n\n    properties: {\n        // foo: {\n        //     // ATTRIBUTES:\n        //     default: null,        // The default value will be used only when the component attaching\n        //                           // to a node for the first time\n        //     type: cc.SpriteFrame, // optional, default is typeof default\n        //     serializable: true,   // optional, default is true\n        // },\n        // bar: {\n        //     get () {\n        //         return this._bar;\n        //     },\n        //     set (value) {\n        //         this._bar = value;\n        //     }\n        // },\n    },\n\n    // LIFE-CYCLE CALLBACKS:\n\n    // onLoad () {},\n\n    start () {\n\n    },\n\n    fireAnimationEnd: function() {\n        this.node.destroy()\n    },\n\n    // update (dt) {},\n});\n","// Learn cc.Class:\n//  - [Chinese] http://www.cocos.com/docs/creator/scripting/class.html\n//  - [English] http://www.cocos2d-x.org/docs/editors_and_tools/creator-chapters/scripting/class/index.html\n// Learn Attribute:\n//  - [Chinese] http://www.cocos.com/docs/creator/scripting/reference/attributes.html\n//  - [English] http://www.cocos2d-x.org/docs/editors_and_tools/creator-chapters/scripting/reference/attributes/index.html\n// Learn life-cycle callbacks:\n//  - [Chinese] http://www.cocos.com/docs/creator/scripting/life-cycle-callbacks.html\n//  - [English] http://www.cocos2d-x.org/docs/editors_and_tools/creator-chapters/scripting/life-cycle-callbacks/index.html\n\ncc.Class({\n    extends: cc.Component,\n\n    properties: {\n        // foo: {\n        //     // ATTRIBUTES:\n        //     default: null,        // The default value will be used only when the component attaching\n        //                           // to a node for the first time\n        //     type: cc.SpriteFrame, // optional, default is typeof default\n        //     serializable: true,   // optional, default is true\n        // },\n        // bar: {\n        //     get () {\n        //         return this._bar;\n        //     },\n        //     set (value) {\n        //         this._bar = value;\n        //     }\n        // },\n    },\n\n    // LIFE-CYCLE CALLBACKS:\n\n    // onLoad () {},\n\n    start () {\n\n    },\n\n    fireAnimationEnd: function() {\n        this.node.destroy()\n    },\n\n    // update (dt) {},\n});\n","// Learn cc.Class:\r//  - [Chinese] http://www.cocos.com/docs/creator/scripting/class.html\r//  - [English] http://www.cocos2d-x.org/docs/editors_and_tools/creator-chapters/scripting/class/index.html\r// Learn Attribute:\r//  - [Chinese] http://www.cocos.com/docs/creator/scripting/reference/attributes.html\r//  - [English] http://www.cocos2d-x.org/docs/editors_and_tools/creator-chapters/scripting/reference/attributes/index.html\r// Learn life-cycle callbacks:\r//  - [Chinese] http://www.cocos.com/docs/creator/scripting/life-cycle-callbacks.html\r//  - [English] http://www.cocos2d-x.org/docs/editors_and_tools/creator-chapters/scripting/life-cycle-callbacks/index.html\r\rcc.Class({\r    extends: cc.Component,\r\r    properties: {\r        // foo: {\r        //     // ATTRIBUTES:\r        //     default: null,        // The default value will be used only when the component attaching\r        //                           // to a node for the first time\r        //     type: cc.SpriteFrame, // optional, default is typeof default\r        //     serializable: true,   // optional, default is true\r        // },\r        // bar: {\r        //     get () {\r        //         return this._bar;\r        //     },\r        //     set (value) {\r        //         this._bar = value;\r        //     }\r        // },\r        maxMoveSpeed: 0,\r        maxBombCount: 1,\r        bombCount: 0,\r        fireLength: 0,\r\r        playerTile: {\r            default: cc.p(0, 0),\r        },\r\r        mapSize: {\r            default: cc.size(0,0)\r        },\r\r        tileSize: {\r            default: cc.size(0,0),\r        },\r\r        lblResult: {\r            default: null,\r            type: cc.Label\r        },\r\r        bombTiles: {\r            default: [],\r            type:[cc.Vec2]\r        },\r\r        bombPrefab: {\r            default: null,\r            type: cc.Prefab\r        },\r\r        player: {\r            default: null,\r            type: cc.Node\r        },\r\r        monster: {\r            default: null,\r            type: cc.Prefab\r        },\r\r        fireHor: {\r            default: null,\r            type: cc.Prefab\r        },\r\r        fireVer: {\r            default: null,\r            type: cc.Prefab\r        },\r\r        map: {\r            default: null,\r            type: cc.TiledMap\r        },\r\r        mainLayer: {\r            default: null,\r            type: cc.TiledLayer\r        },\r\r        hideLayer: {\r            default: null,\r            type: cc.TiledLayer\r        },\r\r        _enemyCount: 0,\r        _gameLost: false\r    },\r\r    // LIFE-CYCLE CALLBACKS:\r\r    onLoad: function () {\r        this.mapSize = this.node.getContentSize();\r        this.tileSize = this.map.getTileSize();\r\r        this.player.accLeft = false;\r        this.player.accRight = false;\r        this.player.accUp = false;\r        this.player.accDown = false;\r\r        this.player.xSpeed = 0;\r        this.player.ySpeed = 0;\r        this.bombTiles = [];\r        this._enemyCount = 0\r\r        console.log(\"restart\")\r\r        this.loadMap();\r\r        this.node.on('bombExplode', this.bombExploded, this)\r    },\r\r    start () {\r\r    },\r\r    loadMap: function(){\r\r        //获取对象层\r        let objects = this.map.getObjectGroup('objects');\r\r        let groupObjects = objects.getObjects();\r\r        var self = this;\r        groupObjects.forEach(function (value) {\r            if (value.getProperty('name') === 'player') {           //设置玩家瓦片坐标\r                let playerOriginPos = cc.p(value.getProperty(\"x\"), self.mapSize.height - value.getProperty(\"y\") * 2);\r                self.player.setPosition(playerOriginPos);\r                self.playerTile = self.getTilePos(self.player.position);\r            } else {                    //设置敌人瓦片坐标\r                let enemyPos = cc.p(value.getProperty(\"x\"), self.mapSize.height - value.getProperty(\"y\") - self.tileSize.height);\r                let newEnemy = cc.instantiate(self.monster);\r                newEnemy.getComponent('enemy').game = self;\r                newEnemy.setAnchorPoint(cc.p(0,0));\r                newEnemy.setPosition(enemyPos);\r                self.mainLayer.node.addChild(newEnemy);\r\r                self._enemyCount++;\r            }\r        })\r    },\r\r    willSetABombAction: function () {\r        this.setABomb()\r    },\r\r    setABomb: function() {\r        this.bombCount++;\r\r        let bomb = cc.instantiate(this.bombPrefab);\r        this.mainLayer.node.addChild(bomb);\r        var playerTile = this.getTilePos(this.player.getPosition());\r        var tilePosition = this.getTilePixelPos(playerTile);\r        if (this.player.x - tilePosition.x > this.tileSize.width / 2) {\r            playerTile = cc.p(playerTile.x + 1, playerTile.y)\r        }\r\r        tilePosition = this.getTilePixelPos(playerTile);\r        bomb.setPosition(cc.p(tilePosition.x + this.tileSize.width * 0.5, tilePosition.y + this.tileSize.height * 0.5));\r\r        this.bombTiles.push(playerTile);\r    },\r\r    bombExploded: function(event) {\r        event.stopPropagation();\r\r        let bombPosition = event.detail;\r        let bombTile = this.getTilePos(bombPosition);\r        this.createBombFire(cc.p(bombTile.x, bombTile.y));\r\r        if (bombTile.equals(this.playerTile)) {\r            this._gameLost = true\r        }\r\r        for (let index in this.bombTiles) {\r            if (bombTile.equals(this.bombTiles[index])) {\r                this.bombTiles.splice(index, 1)\r            }\r        }\r\r        this.bombCount--\r    },\r\r    createBombFire: function(bombTile) {\r        if (this.getTileType(this.mainLayer, cc.p(bombTile.x + 1, bombTile.y)) == null) {\r            let fireTile = cc.p(bombTile.x + 1, bombTile.y + 1);\r            let fireAnim = cc.instantiate(this.fireHor);\r            this.mainLayer.node.addChild(fireAnim);\r            fireAnim.setPosition(cc.p(fireTile.x * this.tileSize.width, (this.mapSize.height - fireTile.y  * this.tileSize.width)));\r\r            if (this.getTileType(this.mainLayer, cc.p(bombTile.x + 2, bombTile.y)) == null) {\r                let fireTile2 = cc.p(bombTile.x + 2, bombTile.y + 1);\r                let fireAnim2 = cc.instantiate(this.fireHor);\r                this.mainLayer.node.addChild(fireAnim2);\r                fireAnim2.setPosition(cc.p(fireTile2.x * this.tileSize.width, (this.mapSize.height - fireTile2.y * this.tileSize.width)))\r            } else if (this.getTileType(this.mainLayer, cc.p(bombTile.x + 2, bombTile.y)) === 'brick') {\r                this.mainLayer.removeTileAt(cc.p(bombTile.x + 2, bombTile.y))\r            } else if (this.getTileType(this.mainLayer, cc.p(bombTile.x + 2, bombTile.y)) === 'player') {\r                // cc.director.loadScene('Game')\r                this._gameLost = true\r            }\r        } else if (this.getTileType(this.mainLayer, cc.p(bombTile.x + 1, bombTile.y)) === 'brick') {\r            this.mainLayer.removeTileAt(cc.p(bombTile.x + 1, bombTile.y))\r        } else if (this.getTileType(this.mainLayer, cc.p(bombTile.x + 1, bombTile.y)) === 'player') {\r            this._gameLost = true\r        }\r        \r        if (this.getTileType(this.mainLayer, cc.p(bombTile.x - 1, bombTile.y)) == null) {\r            let fireTile = cc.p(bombTile.x - 1, bombTile.y + 1);\r            let fireAnim = cc.instantiate(this.fireHor);\r            this.mainLayer.node.addChild(fireAnim);\r            fireAnim.setPosition(cc.p(fireTile.x * this.tileSize.width, (this.mapSize.height - fireTile.y * this.tileSize.width)));\r\r            if (this.getTileType(this.mainLayer, cc.p(bombTile.x - 2, bombTile.y)) == null) {\r                let fireTile2 = cc.p(bombTile.x - 2, bombTile.y + 1);\r                let fireAnim2 = cc.instantiate(this.fireHor);\r                this.mainLayer.node.addChild(fireAnim2);\r                fireAnim2.setPosition(cc.p(fireTile2.x * this.tileSize.width, (this.mapSize.height - fireTile2.y * this.tileSize.width)))\r            } else if (this.getTileType(this.mainLayer, cc.p(bombTile.x - 2, bombTile.y)) === 'brick') {\r                this.mainLayer.removeTileAt(cc.p(bombTile.x - 2, bombTile.y))\r            } else if (this.getTileType(this.mainLayer, cc.p(bombTile.x - 2, bombTile.y)) === 'player') {\r                this._gameLost = true\r            }\r        } else if (this.getTileType(this.mainLayer, cc.p(bombTile.x - 1, bombTile.y)) === 'brick') {\r            this.mainLayer.removeTileAt(cc.p(bombTile.x - 1, bombTile.y))\r        } else if (this.getTileType(this.mainLayer, cc.p(bombTile.x - 1, bombTile.y)) === 'player') {\r            this._gameLost = true\r        }\r\r        if (this.getTileType(this.mainLayer, cc.p(bombTile.x, bombTile.y + 1)) == null) {\r            let fireTile = cc.p(bombTile.x, bombTile.y + 2);\r            let fireAnim = cc.instantiate(this.fireVer);\r            this.mainLayer.node.addChild(fireAnim);\r            fireAnim.setPosition(cc.p(fireTile.x * this.tileSize.width, (this.mapSize.height - fireTile.y * this.tileSize.width)));\r\r            if (this.getTileType(this.mainLayer, cc.p(bombTile.x, bombTile.y + 2)) == null) {\r                let fireTile2 = cc.p(bombTile.x, bombTile.y + 3);\r                let fireAnim2 = cc.instantiate(this.fireVer);\r                this.mainLayer.node.addChild(fireAnim2);\r                fireAnim2.setPosition(cc.p(fireTile2.x * this.tileSize.width, (this.mapSize.height - fireTile2.y * this.tileSize.width)))\r            } else if (this.getTileType(this.mainLayer, cc.p(bombTile.x, bombTile.y + 2)) === 'brick') {\r                this.mainLayer.removeTileAt(cc.p(bombTile.x, bombTile.y + 2))\r            } else if (this.getTileType(this.mainLayer, cc.p(bombTile.x, bombTile.y + 2)) === 'player') {\r                this._gameLost = true\r            }\r        } else if (this.getTileType(this.mainLayer, cc.p(bombTile.x, bombTile.y + 1)) === 'brick') {\r            this.mainLayer.removeTileAt(cc.p(bombTile.x, bombTile.y + 1))\r        } else if (this.getTileType(this.mainLayer, cc.p(bombTile.x, bombTile.y + 1)) === 'player') {\r            this._gameLost = true\r        }\r\r        if (this.getTileType(this.mainLayer, cc.p(bombTile.x, bombTile.y - 1)) == null) {\r            let fireTile = cc.p(bombTile.x, bombTile.y);\r            let fireAnim = cc.instantiate(this.fireVer);\r            this.mainLayer.node.addChild(fireAnim);\r            fireAnim.setPosition(cc.p(fireTile.x * this.tileSize.width, (this.mapSize.height - fireTile.y * this.tileSize.width)));\r\r            if (this.getTileType(this.mainLayer, cc.p(bombTile.x, bombTile.y - 2)) == null) {\r                let fireTile2 = cc.p(bombTile.x, bombTile.y - 1);\r                let fireAnim2 = cc.instantiate(this.fireVer);\r                this.mainLayer.node.addChild(fireAnim2);\r                fireAnim2.setPosition(cc.p(fireTile2.x * this.tileSize.width, (this.mapSize.height - fireTile2.y * this.tileSize.width)))\r            } else if (this.getTileType(this.mainLayer, cc.p(bombTile.x, bombTile.y - 2)) === 'brick') {\r                this.mainLayer.removeTileAt(cc.p(bombTile.x, bombTile.y - 2))\r            } else if (this.getTileType(this.mainLayer, cc.p(bombTile.x, bombTile.y - 2)) === 'player') {\r                this._gameLost = true\r            }\r        } else if (this.getTileType(this.mainLayer, cc.p(bombTile.x, bombTile.y - 1)) === 'brick') {\r            this.mainLayer.removeTileAt(cc.p(bombTile.x, bombTile.y - 1))\r        } else if (this.getTileType(this.mainLayer, cc.p(bombTile.x, bombTile.y - 1)) === 'player') {\r            this._gameLost = true\r        }\r    },\r\r    update (dt) {\r\r        if (this._gameLost) {\r            // this.lblResult.node.opacity = 255;\r            cc.game.restart()\r            return\r        }\r\r        if (this._enemyCount === 0) {\r            this.lblResult.string = \"You Win!\";\r            this.lblResult.node.opacity = 255;\r            return\r        }\r\r        let currentPlayerPosition = this.player.getPosition();\r\r        if (this.player.accLeft) {\r            let self = this;\r            cc.loader.loadRes(\"Player/left\", cc.SpriteFrame, function(err, spriteFrame) {\r                if (err) {\r                    console.log(err)\r                } else {\r                    self.player.getComponent(cc.Sprite).spriteFrame = spriteFrame\r                }\r            });\r\r            let nextTilePos = this.getTilePos(cc.p(currentPlayerPosition.x - this.maxMoveSpeed, currentPlayerPosition.y));\r            if (!this.tryMoveToTarTile(nextTilePos)) {\r\r                //(当前玩家y轴坐标 + 瓦片高度的一半)计算下一块瓦片是否可以通过\r                let tilePos = this.getTilePos(cc.p(currentPlayerPosition.x - this.maxMoveSpeed, currentPlayerPosition.y + this.tileSize.height * 0.5));\r                if (!this.tryMoveToTarTile(tilePos)) {  //不能通过, 水平速度 = 0\r                    let position = this.getTilePixelPos(cc.p(nextTilePos.x + 1, nextTilePos.y));\r                    this.player.setPosition(position.x + 1, currentPlayerPosition.y);\r\r                    this.player.xSpeed = 0\r                } else {  //可以通过, 将玩家位置移动至瓦片位置.  水平位置 = 当前位置 + 水平速度 * 1.5; (1.5倍在移动玩家时, 视觉上不至于出现明显残影)\r                    let newPosition = this.getTilePixelPos(tilePos);\r                    this.player.setPosition(currentPlayerPosition.x - this.maxMoveSpeed * 1.0, newPosition.y + 1)\r                }\r            } else {  //可以通过\r\r                //计算(玩家锚点位置y轴坐标 + 瓦片高度)正对的瓦片是否可以通过\r                let tilePos = this.getTilePos(cc.p(currentPlayerPosition.x - this.maxMoveSpeed, currentPlayerPosition.y + this.tileSize.height - 2));\r                if (!this.tryMoveToTarTile(tilePos)) {      //无法通过, 将玩家移动至玩家所在瓦片的y坐标位置\r                    let currentPlayerTile = this.getTilePos(this.player.getPosition());\r                    let position = this.getTilePixelPos(currentPlayerTile);\r                    this.player.setPosition(currentPlayerPosition.x - this.maxMoveSpeed * 1.0, position.y + 1)\r                } else {  //可以通过, 即当前瓦片所在行没有阻挡\r                    this.player.xSpeed = -this.maxMoveSpeed\r                }\r            }\r        }\r\r        if (this.player.accRight) {\r            let self = this;\r            cc.loader.loadRes(\"Player/right\", cc.SpriteFrame, function(err, spriteFrame) {\r                if (err) {\r                    console.log(err)\r                } else {\r                    self.player.getComponent(cc.Sprite).spriteFrame = spriteFrame\r                }\r            });\r\r            //玩家锚点位置正对的瓦片是否能通过\r            let nextTilePos = this.getTilePos(cc.p(currentPlayerPosition.x + this.player.width + this.maxMoveSpeed, currentPlayerPosition.y));\r            if (!this.tryMoveToTarTile(nextTilePos)) {   //不能通过, 计算相邻位置瓦片\r\r                //(当前玩家y轴坐标 + 瓦片高度的一半)计算下一块瓦片是否可以通过\r                let tilePos = this.getTilePos(cc.p(currentPlayerPosition.x + this.player.width + this.maxMoveSpeed, currentPlayerPosition.y + this.tileSize.height * 0.5));\r                if (!this.tryMoveToTarTile(tilePos)) {  //不能通过, 水平速度 = 0\r                    let position = this.getTilePixelPos(cc.p(nextTilePos.x - 1, nextTilePos.y));\r                    this.player.setPosition(position.x + 1, currentPlayerPosition.y);\r\r                    this.player.xSpeed = 0\r                } else {  //可以通过, 将玩家位置移动至瓦片位置.  水平位置 = 当前位置 + 水平速度 * 1.5; (1.5倍在移动玩家时, 视觉上不至于出现明显残影)\r                    let newPosition = this.getTilePixelPos(tilePos);\r                    this.player.setPosition(currentPlayerPosition.x + this.maxMoveSpeed * 1.0, newPosition.y + 1)\r                }\r            } else {  //可以通过\r\r                //计算(玩家锚点位置y轴坐标 + 瓦片高度)正对的瓦片是否可以通过\r                let tilePos = this.getTilePos(cc.p(currentPlayerPosition.x + this.player.width + this.maxMoveSpeed, currentPlayerPosition.y + this.tileSize.height - 2));\r                if (!this.tryMoveToTarTile(tilePos)) {      //无法通过, 将玩家移动至玩家所在瓦片的y坐标位置\r                    let currentPlayerTile = this.getTilePos(this.player.getPosition());\r                    let position = this.getTilePixelPos(currentPlayerTile);\r                    this.player.setPosition(currentPlayerPosition.x + this.maxMoveSpeed * 1.0, position.y + 1)\r                } else {  //可以通过, 即当前瓦片所在行没有阻挡\r                    this.player.xSpeed = this.maxMoveSpeed\r                }\r            }\r        }\r\r        if (!this.player.accLeft && !this.player.accRight) {\r            this.player.xSpeed = 0\r        }\r\r        this.player.x += this.player.xSpeed;\r\r        if (this.player.accUp) {\r            let self = this;\r            cc.loader.loadRes(\"Player/back\", cc.SpriteFrame, function(err, spriteFrame) {\r                if (err) {\r                    console.log(err)\r                } else {\r                    self.player.getComponent(cc.Sprite).spriteFrame = spriteFrame\r                }\r            });\r\r            //玩家资源图的宽度比瓦片宽度更小, 不能用玩家位置+瓦片宽度, 因为玩家x坐标 = 瓦片坐标 + 1\r            let nextTilePos = this.getTilePos(cc.p(currentPlayerPosition.x, currentPlayerPosition.y + this.tileSize.height + this.maxMoveSpeed));\r            if (!this.tryMoveToTarTile(nextTilePos)) {\r\r                let tilePos = this.getTilePos(cc.p(currentPlayerPosition.x + this.player.width * 0.5, currentPlayerPosition.y + this.tileSize.height + this.maxMoveSpeed));\r                if (!this.tryMoveToTarTile(tilePos)) {\r                    let position = this.getTilePixelPos(cc.p(nextTilePos.x, nextTilePos.y + 1));\r                    this.player.setPosition(currentPlayerPosition.x, position.y + 1);\r                    this.player.ySpeed = 0;\r                } else {\r                    let newPosition = this.getTilePixelPos(tilePos);\r                    this.player.setPosition(newPosition.x + 1, currentPlayerPosition.y + this.maxMoveSpeed * 1.0)\r                }\r            } else {\r                let tilePos = this.getTilePos(cc.p(currentPlayerPosition.x + this.player.width, currentPlayerPosition.y + this.tileSize.height + this.maxMoveSpeed));\r                if (!this.tryMoveToTarTile(tilePos)) {\r                    let currentPlayerTile = this.getTilePos(this.player.getPosition());\r                    let position = this.getTilePixelPos(currentPlayerTile);\r                    this.player.setPosition(position.x + 1, currentPlayerPosition.y + this.maxMoveSpeed * 1.0)\r                } else {\r                    this.player.ySpeed = this.maxMoveSpeed\r                }\r            }\r        }\r\r        if (this.player.accDown) {\r            let self = this;\r            cc.loader.loadRes(\"Player/front\", cc.SpriteFrame, function(err, spriteFrame) {\r                if (err) {\r                    console.log(err)\r                } else {\r                    self.player.getComponent(cc.Sprite).spriteFrame = spriteFrame\r                }\r            });\r\r            let nextTilePos = this.getTilePos(cc.p(currentPlayerPosition.x, currentPlayerPosition.y - this.maxMoveSpeed));\r            if (!this.tryMoveToTarTile(nextTilePos)) {\r\r                let tilePos = this.getTilePos(cc.p(currentPlayerPosition.x + this.player.width, currentPlayerPosition.y - this.maxMoveSpeed));\r                if (!this.tryMoveToTarTile(tilePos)) {\r                    let position = this.getTilePixelPos(cc.p(nextTilePos.x, nextTilePos.y - 1));\r                    this.player.setPosition(currentPlayerPosition.x, position.y + 1);\r                    this.player.ySpeed = 0;\r                } else {\r                    let newPosition = this.getTilePixelPos(tilePos);\r                    this.player.setPosition(newPosition.x + 1, currentPlayerPosition.y - this.maxMoveSpeed * 1.0)\r                }\r            } else {\r                let tilePos = this.getTilePos(cc.p(currentPlayerPosition.x + this.player.width, currentPlayerPosition.y - this.maxMoveSpeed));\r                if (!this.tryMoveToTarTile(tilePos)) {\r                    let currentPlayerTile = this.getTilePos(this.player.getPosition());\r                    let position = this.getTilePixelPos(currentPlayerTile);\r                    this.player.setPosition(position.x + 1, currentPlayerPosition.y - this.maxMoveSpeed * 1.0)\r                } else {\r                    this.player.ySpeed = -this.maxMoveSpeed\r                }\r            }\r        }\r\r        if (!this.player.accUp && !this.player.accDown) {\r            this.player.ySpeed = 0\r        }\r\r        this.player.y += this.player.ySpeed;\r\r        this.updatePlayerTilePos()\r    },\r\r    tryMoveToTarTile: function(newTile) {\r        //检测mainLayer是否可以通过\r        if (this.mainLayer.getTileGIDAt(newTile)) { //tile不为空，返回\r            return false;\r        }\r\r        if (this.bombTiles != null && this.bombTiles.length !== 0) {\r            for (let index in this.bombTiles) {\r                if (newTile.equals(this.bombTiles[index])) {\r                    if (newTile.equals(this.playerTile)) {\r                        return true\r                    } else {\r                        return false\r                    }\r                }\r            }\r        }\r\r        return true\r    },\r\r    //获得tile的type属性值\r    getTileType:function(layer,tile) {\r        let prop = this.map.getPropertiesForGID(layer.getTileGIDAt(tile));\r        if(prop) {\r            return prop.type;\r        } else if (tile.equals(this.playerTile)) {\r            return 'player'\r        } else {\r            return null\r        }\r    },\r\r    //将地图中的像素单位坐标转化为瓦片单位坐标\r    getTilePos: function(posInPixel) {\r        let x = Math.floor(posInPixel.x / this.tileSize.width);\r        let y = Math.floor((this.mapSize.height - posInPixel.y) / this.tileSize.height);\r\r        return cc.p(x, y);\r    },\r\r    /*将瓦片坐标转换为像素单位*/\r    getTilePixelPos: function(tilePos) {\r        let x = tilePos.x * this.tileSize.width;\r        let y = this.mapSize.height - (tilePos.y + 1) * this.tileSize.height;\r\r        return cc.p(x, y)\r    },\r\r    /*更新玩家瓦片坐标*/\r    updatePlayerTilePos: function () {\r        var tmpPlayerTile = this.getTilePos(this.player.getPosition());\r        let position = this.getTilePixelPos(tmpPlayerTile);\r\r        if (this.player.getPosition().x - position.x > this.player.width / 2) {\r            tmpPlayerTile = cc.p(tmpPlayerTile.x + 1, tmpPlayerTile.y);\r        }\r\r        this.playerTile = tmpPlayerTile;\r    }\r});\r","// Learn cc.Class:\n//  - [Chinese] http://www.cocos.com/docs/creator/scripting/class.html\n//  - [English] http://www.cocos2d-x.org/docs/editors_and_tools/creator-chapters/scripting/class/index.html\n// Learn Attribute:\n//  - [Chinese] http://www.cocos.com/docs/creator/scripting/reference/attributes.html\n//  - [English] http://www.cocos2d-x.org/docs/editors_and_tools/creator-chapters/scripting/reference/attributes/index.html\n// Learn life-cycle callbacks:\n//  - [Chinese] http://www.cocos.com/docs/creator/scripting/life-cycle-callbacks.html\n//  - [English] http://www.cocos2d-x.org/docs/editors_and_tools/creator-chapters/scripting/life-cycle-callbacks/index.html\n\nvar Common = require('JoystickDefines');\n\ncc.Class({\n    extends: cc.Component,\n\n    properties: {\n        _bomberGame: {\n            default: null,\n            displayName: '游戏场景节点'\n        },\n\n        stickDot: {\n            default: null,\n            type: cc.Node,\n            displayName: '摇杆节点'\n        },\n\n        _angle: {\n            default: null,\n            displayName: '当前触摸的角度'\n        },\n\n        _radian: {\n            default: null,\n            displayName: '弧度'\n        },\n\n        stickType: {\n            default: Common.DirectionType.FOUR,\n            type: Common.DirectionType,\n            displayName: '摇杆方向'\n        }\n    },\n\n    // LIFE-CYCLE CALLBACKS:\n\n    onLoad () {\n        this._bomberGame = this.node.parent.getComponent('game');\n\n        console.log(this._bomberGame);\n\n        this.initJoyStickTouchEvent()\n    },\n\n    start () {\n\n    },\n\n    /*圆圈的触摸监听*/\n    initJoyStickTouchEvent: function()\n    {\n        var self = this;\n\n        self.node.on(cc.Node.EventType.TOUCH_START, this._touchStartEvent, self);\n\n        self.node.on(cc.Node.EventType.TOUCH_MOVE, this._touchMoveEvent, self);\n\n        // 触摸在圆圈内离开或在圆圈外离开后，摇杆归位，player速度为0\n        self.node.on(cc.Node.EventType.TOUCH_END, this._touchEndEvent, self);\n\n        self.node.on(cc.Node.EventType.TOUCH_CANCEL, this._touchEndEvent, self);\n    },\n\n    //计算两点间的距离并返回\n    _getDistance: function(pos1, pos2)\n    {\n        return Math.sqrt(Math.pow(pos1.x - pos2.x, 2) + Math.pow(pos1.y - pos2.y, 2));\n    },\n\n    /*角度/弧度转换\n    角度 = 弧度 * 180 / Math.PI\n    弧度 = 角度 * Math.PI / 180*/\n    //计算弧度并返回\n    _getRadian: function(point)\n    {\n        this._radian = Math.PI / 180 * this._getAngle(point);\n        return this._radian;\n    },\n\n    //计算角度并返回\n    _getAngle: function(point)\n    {\n\n        var pos = cc.p(0, 0)//this.node.getPosition();\n        this._angle = Math.atan2(point.y - pos.y, point.x - pos.x) * (180/Math.PI);\n        return this._angle;\n    },\n\n    //设置实际速度\n    _setSpeed: function(point)\n    {\n        //触摸点和遥控杆中心的距离\n        var distance = this._getDistance(point, this.node.getPosition());\n\n        //如果半径\n        if(distance < this._radius)\n        {\n            this._speed = this._speed1;\n        }\n        else\n        {\n            this._speed = this._speed2;\n        }\n    },\n\n    _touchStartEvent: function(event) {\n        // 获取触摸位置的世界坐标转换成圆圈的相对坐标（以圆圈的锚点为基准）\n        var touchPos = this.node.convertToNodeSpaceAR(event.getLocation());\n        //触摸点与圆圈中心的距离\n        var distance = this._getDistance(touchPos,cc.p(0,0));\n        //圆圈半径\n        var radius = this.node.width / 2;\n        // 记录摇杆位置，给touch move使用\n        this._stickPos = touchPos;\n        var posX = /*this.node.getPosition().x + */touchPos.x;\n        var posY = /*this.node.getPosition().y + */touchPos.y;\n        //手指在圆圈内触摸,控杆跟随触摸点\n        if(radius > distance)\n        {\n            this.stickDot.setPosition(cc.p(posX, posY));\n            return true;\n        }\n\n        return false;\n    },\n\n    _touchMoveEvent: function(event){\n        var touchPos = this.node.convertToNodeSpaceAR(event.getLocation());\n        var distance = this._getDistance(touchPos,cc.p(0,0));\n        var radius = this.node.width / 2;\n        // 由于摇杆的postion是以父节点为锚点，所以定位要加上ring和dot当前的位置(stickX,stickY)\n\n        if(radius > distance)\n        {\n            console.log(cc.p(touchPos.x, touchPos.y))\n            this.stickDot.setPosition(cc.p(touchPos.x, touchPos.y));\n            this._getAngle(cc.p(touchPos.x,touchPos.y));\n        }\n        else\n        {\n            var posX = /*this.node.getPosition().x + */touchPos.x;\n            var posY = /*this.node.getPosition().y + */touchPos.y;\n            //控杆永远保持在圈内，并在圈内跟随触摸更新角度\n            var x = /*this.node.getPosition().x + */Math.cos(this._getRadian(cc.p(posX,posY))) * radius;\n            var y = /*this.node.getPosition().y + */Math.sin(this._getRadian(cc.p(posX,posY))) * radius;\n            this.stickDot.setPosition(cc.p(x, y));\n            this._getAngle(cc.p(posX,posY));\n        }\n        //更新角度\n        this._fourDirectionsMove()\n    },\n\n    _touchEndEvent: function(){\n        this.stickDot.setPosition(cc.p(0, 0));\n        this._speed = 0;\n        this._angle = null;\n\n        this._fourDirectionsMove()\n    },\n\n    /*四方向移动*/\n    _fourDirectionsMove: function() {\n        this._bomberGame.player.accLeft = false;\n        this._bomberGame.player.accRight = false;\n        this._bomberGame.player.accUp = false;\n        this._bomberGame.player.accDown = false;\n\n        if (this._angle == null) {\n            return\n        }\n\n        if (this._angle < 45 && this._angle > -45) {\n            this._bomberGame.player.accRight = true\n        }\n\n        if (this._angle > 45 && this._angle < 135) {\n            this._bomberGame.player.accUp = true\n        }\n\n        if ((this._angle > 135 && this._angle < 180) || (this._angle > -180 && this._angle < -135)) {\n            this._bomberGame.player.accLeft = true\n        }\n\n        if (this._angle > -135 && this._angle < -45) {\n            this._bomberGame.player.accDown = true\n        }\n    },\n\n    // update (dt) {},\n});\n"],"sourceRoot":"/source/","file":"project.js"}